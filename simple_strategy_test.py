from __future__ import annotations
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ุงุฎุชุจุงุฑ ุจุณูุท ููุงุณุชุฑุงุชูุฌูุงุช ุงูุฌุฏูุฏุฉ
"""

import numpy as np
import sys
import os

# ุฅุถุงูุฉ ูุณุงุฑ NashMind
sys.path.append(os.path.join(os.getcwd(), 'NashMind'))

from core.arc_problem_solver import ARCProblemSolver

def test_color_strategies():
    """ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุฃููุงู"""
    
    print("๐จ ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุฃููุงู")
    print("="*40)
    
    # ุฅูุดุงุก ุญูุงู ุงููุณุงุฆู
    solver = ARCProblemSolver()
    
    # ุดุจูุฉ ุงุฎุชุจุงุฑ
    test_grid = np.array([
        [1, 0, 2],
        [0, 1, 0],
        [2, 0, 1]
    ])
    
    print(f"ุงูุดุจูุฉ ุงูุฃุตููุฉ:")
    print(test_grid)
    
    # ุงุฎุชุจุงุฑ ุนูุณ ุงูุฃููุงู
    inverted = solver.invert_colors(test_grid)
    if inverted is not None:
        print(f"\nุนูุณ ุงูุฃููุงู:")
        print(inverted)
    
    # ุงุฎุชุจุงุฑ ุชุจุฏูู ุงูุฃููุงู
    swapped = solver.swap_dominant_colors(test_grid)
    if swapped is not None:
        print(f"\nุชุจุฏูู ุงูุฃููุงู:")
        print(swapped)
    
    # ุงุฎุชุจุงุฑ ุงูุชุฏุฑุฌ
    gradient = solver.apply_color_gradient(test_grid)
    if gradient is not None:
        print(f"\nุงูุชุฏุฑุฌ ุงููููู:")
        print(gradient)
    
    print("\nโ ุงูุชูู ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุฃููุงู")

def test_size_strategies():
    """ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุญุฌู"""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุญุฌู")
    print("="*40)
    
    # ุฅูุดุงุก ุญูุงู ุงููุณุงุฆู
    solver = ARCProblemSolver()
    
    # ุดุจูุฉ ุงุฎุชุจุงุฑ ุฃูุจุฑ
    test_grid = np.array([
        [1, 2, 3, 4],
        [5, 6, 7, 8],
        [9, 1, 2, 3],
        [4, 5, 6, 7]
    ])
    
    print(f"ุงูุดุจูุฉ ุงูุฃุตููุฉ ({test_grid.shape}):")
    print(test_grid)
    
    # ุงุฎุชุจุงุฑ ุงูุชุตุบูุฑ
    shrunk = solver.shrink_by_half(test_grid)
    if shrunk is not None:
        print(f"\nุชุตุบูุฑ ุจุงููุตู ({shrunk.shape}):")
        print(shrunk)
    
    # ุงุฎุชุจุงุฑ ูุต ุงูุญูุงู
    cropped = solver.crop_borders(test_grid)
    if cropped is not None:
        print(f"\nูุต ุงูุญูุงู ({cropped.shape}):")
        print(cropped)
    
    print("\nโ ุงูุชูู ุงุฎุชุจุงุฑ ุงุณุชุฑุงุชูุฌูุงุช ุงูุญุฌู")

def test_basic_strategies():
    """ุงุฎุชุจุงุฑ ุงูุงุณุชุฑุงุชูุฌูุงุช ุงูุฃุณุงุณูุฉ"""
    
    print("\n๐ ุงุฎุชุจุงุฑ ุงูุงุณุชุฑุงุชูุฌูุงุช ุงูุฃุณุงุณูุฉ")
    print("="*40)
    
    # ุฅูุดุงุก ุญูุงู ุงููุณุงุฆู
    solver = ARCProblemSolver()
    
    # ุดุจูุฉ ุงุฎุชุจุงุฑ
    test_grid = np.array([
        [1, 0, 2],
        [0, 1, 0],
        [2, 0, 1]
    ])
    
    print(f"ุงูุดุจูุฉ ุงูุฃุตููุฉ:")
    print(test_grid)
    
    # ุชุทุจูู ุงูุงุณุชุฑุงุชูุฌูุงุช ุงูุฃุณุงุณูุฉ
    candidates = solver.apply_basic_strategies(test_grid)
    
    print(f"\nุนุฏุฏ ุงููุฑุดุญูู: {len(candidates)}")
    
    for i, candidate in enumerate(candidates[:5]):  # ุฃูู 5 ูุฑุดุญูู
        strategy = candidate['strategy']
        confidence = candidate['confidence']
        output = np.array(candidate['output'])
        
        print(f"\nูุฑุดุญ {i+1}: {strategy} (ุซูุฉ: {confidence})")
        print(output)
    
    print("\nโ ุงูุชูู ุงุฎุชุจุงุฑ ุงูุงุณุชุฑุงุชูุฌูุงุช ุงูุฃุณุงุณูุฉ")

if __name__ == "__main__":
    try:
        test_color_strategies()
        test_size_strategies()
        test_basic_strategies()
        
        print("\n๐ ุงูุชูู ุฌููุน ุงูุงุฎุชุจุงุฑุงุช ุจูุฌุงุญ!")
        
    except Exception as e:
        print(f"\nโ ุฎุทุฃ ูู ุงูุงุฎุชุจุงุฑ: {e}")
        import traceback
        traceback.print_exc()
